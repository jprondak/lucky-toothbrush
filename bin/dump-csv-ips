#!/opt/csm/64-bit/perl/5.16.3/bin/perl
#
#
#
use strict;
use warnings;
use lib qw( /opt/csm/64-bit/cpan/5.16.3-2013.03/lib );
use Text::CSV;
use Data::Dumper;

my $PROGNAME = $0;
$PROGNAME =~ s!.*/!!;
my $bad_ips = 0;
my $bad_hosts = 0;
my $ips = 0;
my $count = 0;
my %hosts = ();

for my $file ( @ARGV ) {
	my $csv = Text::CSV->new(
        {
            binary      => 1,
            eol         => $/,
            quote_space => 1,
            auto_diag   => 1,
#            allow_loose_escapes => 1
        }
    );
	unless ( defined $csv ){
		print STDERR "[$PROGNAME] ERROR: Cannot use CSV: " .
			Text::CSV->error_diag();
		exit 1;
	}

	CORE::open my $fh, "<:crlf:utf8", $file or die "$file: $!";

	my $headings = $csv->getline( $fh );

	my ($hostname) = grep { /^(?:host.+?|fqdn|server.+?)/i } @$headings;

	my ($ipaddr) = grep { /^(?:ip.+?)/i } @$headings;
	if ( ! defined $ipaddr ) {
		print STDERR
			sprintf(
				"[%s] ERROR: No IPADDRESS Header found in CSV\n",
				$PROGNAME);
			exit 1;
	}

	$csv->column_names(@$headings);

	while ( my $row = $csv->getline_hr( $fh ) ) {

		$count++;
		my $ip = $row->{$ipaddr};
		my $host = $row->{$hostname};
		
		unless ( $ip ) {
			print STDERR
				sprintf(
					"[%s] ERROR: %s: has a no ipaddress\n",
					$PROGNAME,
					$host
				); 	
       		$bad_ips++;
        	next;
		}
		unless ( $ip =~ m/(\b(?:\d{1,3}\.){3}\d{1,3}\b)/ ) {
        	print STDERR
				sprintf(
					"[%s] ERROR: %s[%s] is not an IPv4 address\n",
					$PROGNAME,
					$host,
					$ip
				);
       		$bad_ips++;
        	next;
		}
		if ( $ip eq "127.0.0.1" ) {
        	print STDERR
				sprintf(
					"[%s] ERROR: %s[%s] is localhost\n",
					$PROGNAME,
					$host,
					$ip
				);
       		$bad_ips++;
        	next;
		}
		if ( $ip eq "0.0.0.0" ) {
        	print STDERR
				sprintf(
					"[%s] ERROR: %s[%s] is all zeros\n",
					$PROGNAME,
					$host,
					$ip
				);
       		$bad_ips++;
        	next;
		}

		if ( exists $hosts{$ip} ) {
        	print STDERR
				sprintf(
					"[%s] ERROR: %s[%s] is a duplicate IP of %s[%s]\n",
					$PROGNAME,
					$host,
					$ip,
					$hosts{$ip}->{$hostname},
					$hosts{$ip}->{$ipaddr},
				);
       		$bad_ips++;
        	next;
		}
		$hosts{$ip} = $row;
		$ips++;
		printf("%s\n", $ip);
	}
}
END {
	print STDERR
		sprintf("[%s] Read %d Records: %d/%d (GOOD/BAD) IPs\n",
			$PROGNAME,
			$count,
			$ips,
			$bad_ips
		);
			
}
